# github.com/clozed2u :: @clozed2u
# http://clozed2u.com

# Homebrew {{{

export HOMEBREW=/usr/local

# }}}

# Export {{{

  # Global {{{2

  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export LC_CTYPE=en_US.UTF-8
  export TERM=xterm-256color
  export CLICOLOR=1
  export KEYTIMEOUT=1
  export VISUAL=vim
  export EDITOR=vim
  export PAGER=less
  export LSCOLORS=ExFxCxDxBxegedabagacad
  export GREP_OPTIONS='--color=auto'
  export PYTHONSTARTUP=$HOME/.pythonrc

  # }}}

  # Language {{{2

    # Go {{{3

    export GOROOT=$HOMEBREW/opt/go/libexec
    export GOPATH=$HOME/Workspace
    export GOBIN=$GOPATH/bin
    export PATH=$GOBIN:$PATH

    # }}}

    # Java {{{3

    export JAVA_HOME=$HOME/.jdk/Contents/Home

    # }}}

  # }}}

# }}}

# Path {{{

path=(
  $HOMEBREW/{bin,sbin}
  $HOME/.bin
  $path
)

# }}}

# Alias {{{

alias vi='vim'
alias ll='ls -Glah'
alias cp='cp -ivR'
alias mv='mv -iv'
alias mp='multipass'
alias mkd='mkdir -pv'
alias tmux='tmux -f $HOME/.tmuxrc'
alias flushdns='dscacheutil -flushcache && sudo killall -HUP mDNSResponder'

for method in GET POST PUT DELETE HEAD; do
  alias "$method"="curl -s -X $method"
done

# }}}

# Settings {{{

autoload -Uz add-zsh-hook

unsetopt global_rcs
unsetopt beep
unsetopt correct_all
unsetopt flowcontrol
setopt correct
setopt auto_cd
setopt auto_pushd
setopt auto_name_dirs
setopt pushd_ignore_dups
setopt pushd_silent
setopt pushd_to_home
setopt cdable_vars
setopt auto_menu
setopt auto_list
setopt auto_param_slash
setopt menu_complete
setopt complete_in_word
setopt complete_aliases
setopt glob_complete
setopt always_to_end
setopt extended_glob
setopt prompt_subst
setopt long_list_jobs
setopt path_dirs
setopt multios
setopt interactivecomments

# }}}

# Vim {{{

bindkey -v
bindkey '^p' up-line-or-search
bindkey '^n' down-line-or-search
bindkey '^r' history-incremental-search-backward
bindkey -M viins '^a' beginning-of-line
bindkey -M viins '^e' end-of-line

# }}}

# VCS {{{

autoload -Uz vcs_info
vcs_info

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*:*' get-revision true
zstyle ':vcs_info:*:*' check-for-changes true
zstyle ':vcs_info:*:*' stagedstr '%F{yellow}'
zstyle ':vcs_info:*:*' unstagedstr '%F{red}'
zstyle ':vcs_info:*:*' branchformats '%r'
zstyle ':vcs_info:*:*' formats '%F{green}%m%c%u%b%f'
zstyle ':vcs_info:*:*' actionformats '%F{green}%m%c%u%b%f'
zstyle ':vcs_info:git*+set-message:*' hooks git-remote git-untracked git-stash

# Get name of remote that we're tracking
function +vi-git-remote() {
  local remote
  remote=$(git remote | tr '\n' '/' | sed 's/.$//' 2>/dev/null)

  if [[ -n $remote ]]; then
    hook_com[branch]="${remote}/${hook_com[branch]}"
    hook_com[branch]="${hook_com[branch]}"
  fi
}

# Show untracked files indicator
function +vi-git-untracked() {
  local untracked
  untracked=$(git ls-files --other --exclude-standard 2>/dev/null)

  if [[ -n $untracked ]]; then
    hook_com[misc]='%F{red}'
  fi
}

# Show number of stashed changes.
function +vi-git-stash() {
local -a stashes

if [[ -s ${hook_com[base]}/.git/refs/stash ]]; then
  stashes=(${(@f)$(git stash list 2>/dev/null)})
  # Sometimes refs/stash exists even with 0 stashes
  # Make sure we have at least 1 stash before adding this info
  if (( ${#stashes} )); then
    hook_com[misc]+="${#stashes}s/"
  fi
fi
}

add-zsh-hook precmd vcs_info

# }}}

# Autocomplete {{{

autoload -Uz compinit

if [ $(date +'%j') != $(stat -f '%Sm' -t '%j' $HOME/.zcompdump) ]; then
  compinit
else
  compinit -C
fi

zstyle ':completion::complete:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

# }}}

# History {{{

setopt append_history
setopt inc_append_history
setopt extended_history
setopt share_history
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt hist_find_no_dups
setopt hist_reduce_blanks
setopt hist_save_no_dups

HISTCONTROL='erasedups:ignorespace'
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
HISTFILESIZE=2000000

function fh() {
  eval $(fc -ln 0 | hs)
}

# }}}

# Title {{{

DISABLE_AUTO_TITLE='true'

function set-window-title() {
  # echo -ne "\e]0;${USER}:${PWD}\a"
  local FULL_COMMAND="$2 "
  if [[ ! -z "$FULL_COMMAND" && "$FULL_COMMAND" != "" && "$FULL_COMMAND" != " " ]]; then
    local PROCESS_NAME=${${=FULL_COMMAND}[1]}
    echo -ne "\e]0;${PROCESS_NAME}\a"
  else
    echo -ne "\e]0;${USER}\a"
  fi
}

add-zsh-hook chpwd set-window-title
add-zsh-hook precmd set-window-title
add-zsh-hook preexec set-window-title

# }}}

# Prompt {{{

autoload -Uz promptinit colors
promptinit
colors

# PROMPT='%B%(3~|</%3d|%d)%b ○ %{$reset_color%}'
PROMPT='#!%35<\<<%d ○ %{$reset_color%}'
RPROMPT='${vcs_info_msg_0_}'

# }}}

# Clipboard {{{

# Rip from github.com/kutsan/zsh-system-clipboard
typeset -A ZSH_SYSTEM_CLIPBOARD
typeset -g ZSH_SYSTEM_CLIPBOARD[set]='pbcopy'
typeset -g ZSH_SYSTEM_CLIPBOARD[get]='pbpaste'
alias zsh-system-clipboard-set="${ZSH_SYSTEM_CLIPBOARD[set]}"
alias zsh-system-clipboard-get="${ZSH_SYSTEM_CLIPBOARD[get]}"

function zsh-system-clipboard-vicmd-vi-yank() {
  zle vi-yank
  if [[ "${KEYS}" == "y" ]]; then # A new line should be added to the end
    printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
  else
    printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
  fi
}
zle -N zsh-system-clipboard-vicmd-vi-yank

function zsh-system-clipboard-vicmd-vi-yank-whole-line() {
  zle vi-yank-whole-line
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-yank-whole-line

function zsh-system-clipboard-vicmd-vi-put-after() {
  local CLIPBOARD
  CLIPBOARD=$(zsh-system-clipboard-get)
  BUFFER="${BUFFER:0:$(( ${CURSOR} + 1 ))}${CLIPBOARD}${BUFFER:$(( ${CURSOR} + 1 ))}"
  CURSOR=$(( $#LBUFFER + $#CLIPBOARD ))
}
zle -N zsh-system-clipboard-vicmd-vi-put-after

function zsh-system-clipboard-vicmd-vi-put-before() {
  local CLIPBOARD
  CLIPBOARD=$(zsh-system-clipboard-get)
  BUFFER="${BUFFER:0:$(( ${CURSOR} ))}${CLIPBOARD}${BUFFER:$(( ${CURSOR} ))}"
  CURSOR=$(( $#LBUFFER + $#CLIPBOARD - 1 ))
}
zle -N zsh-system-clipboard-vicmd-vi-put-before

function zsh-system-clipboard-vicmd-vi-delete() {
  zle vi-delete
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-delete

function zsh-system-clipboard-vicmd-vi-delete-char() {
  zle vi-delete-char
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-delete-char

function zsh-system-clipboard-vicmd-vi-change-eol() {
  zle vi-change-eol
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-change-eol

function zsh-system-clipboard-vicmd-vi-kill-eol() {
  zle vi-kill-eol
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-kill-eol

function zsh-system-clipboard-vicmd-vi-change-whole-line() {
  zle vi-change-whole-line
  printf '%s\n' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-change-whole-line

function zsh-system-clipboard-vicmd-vi-change() {
  zle vi-change
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-change

function zsh-system-clipboard-vicmd-vi-substitue() {
  zle vi-substitue
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-substitue

function zsh-system-clipboard-vicmd-vi-delete-char() {
  zle vi-delete-char
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-delete-char

function zsh-system-clipboard-vicmd-vi-backward-delete-char() {
  zle vi-backward-delete-char
  printf '%s' "$CUTBUFFER" | zsh-system-clipboard-set
}
zle -N zsh-system-clipboard-vicmd-vi-backward-delete-char

# Bind keys to widgets
function () {
  local binded_keys i parts key cmd keymap
  for keymap in vicmd visual emacs; do
    binded_keys=(${(f)"$(bindkey -M $keymap)"})
    for (( i = 1; i < ${#binded_keys[@]}; ++i )); do
      parts=("${(z)binded_keys[$i]}")
      key="${parts[1]}"
      cmd="${parts[2]}"
      if (( $+functions[zsh-system-clipboard-$keymap-$cmd] )); then
        eval bindkey -M $keymap $key zsh-system-clipboard-$keymap-$cmd
      fi
    done
  done
}

# }}}

# Ensure unique path {{{

typeset -gU cdpath fpath mailpath path

# }}}
