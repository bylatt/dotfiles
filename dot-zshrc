# vim: set sw=2 ts=2 sts=0 et fdm=marker :nospell:

# Homebrew {{{

export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_NO_INSTALL_FROM_API=1
export HOMEBREW=$(/opt/homebrew/bin/brew --prefix)
export EZA_CONFIG_DIR=$HOME/.config/eza

# }}}

# Export {{{

  # Global {{{2

  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export LC_CTYPE=en_US.UTF-8
  export CLICOLOR=1
  export KEYTIMEOUT=1
  export VISUAL=nvim
  export EDITOR=nvim
  export PAGER=less
  export GREP_OPTIONS="--color=auto"
  export PYTHONSTARTUP=$HOME/.pythonrc

  # }}}

  # Go {{{2

  export GOPATH=$HOME/.go
  export GOBIN=$GOPATH/bin

  # }}}

  # Rust {{{2

  export RUSTPATH=$HOME/.cargo
  export RUSTBIN=$RUSTPATH/bin

  # }}}

  # Bun {{{2

  export BUNPATH=$HOME/.bun
  export BUNBIN=$BUNPATH/bin

  # }}}

# }}}

# Path {{{

path=(
  $HOMEBREW/{bin,sbin}
  $HOME/.pub-cache/bin
  $HOME/.bin
  $GOBIN
  $RUSTBIN
  $BUNBIN
  $path
)

# }}}

# Alias {{{


alias c="printf '\33c\e[3J'"
alias vi="nvim"
alias vim="nvim"
alias ls="eza"
alias ll="eza -gla"
alias brew="arch -arm64 brew"
alias tree="eza --tree"
alias cp="cp -ivR"
alias mv="mv -iv"

# }}}

# Settings {{{

autoload -Uz add-zsh-hook

unsetopt global_rcs
unsetopt beep
unsetopt correct_all
unsetopt flowcontrol
setopt correct
setopt auto_cd
setopt auto_pushd
setopt auto_name_dirs
setopt pushd_ignore_dups
setopt pushd_silent
setopt pushd_to_home
setopt cdable_vars
setopt auto_menu
setopt auto_list
setopt auto_param_slash
setopt menu_complete
setopt complete_in_word
setopt complete_aliases
setopt glob_complete
setopt always_to_end
setopt extended_glob
setopt prompt_subst
setopt long_list_jobs
setopt path_dirs
setopt multios
setopt interactivecomments

# }}}

# Vim {{{

bindkey -v
bindkey "^p" up-line-or-search
bindkey "^n" down-line-or-search
bindkey "^r" history-incremental-search-backward
bindkey -M viins "^a" beginning-of-line
bindkey -M viins "^e" end-of-line

function vi-yank-xclip () {
  zle vi-yank
  echo "$CUTBUFFER" | pbcopy -i
}

zle -N vi-yank-xclip
bindkey -M vicmd 'y' vi-yank-xclip

# }}}

# VCS {{{

autoload -Uz vcs_info
vcs_info

zstyle ":vcs_info:*" enable git
zstyle ":vcs_info:*:*" get-revision true
zstyle ":vcs_info:*:*" check-for-changes true
zstyle ":vcs_info:*:*" stagedstr "%F{yellow}"
zstyle ":vcs_info:*:*" unstagedstr "%F{red}"
zstyle ":vcs_info:*:*" branchformats "%r"
zstyle ":vcs_info:*:*" formats "%F{green}%m%c%u%b%f"
zstyle ":vcs_info:*:*" actionformats "%F{green}%m%c%u%b%f"
zstyle ":vcs_info:git*+set-message:*" hooks git-remote git-untracked git-stash

# Get name of remote that we are tracking
function +vi-git-remote() {
  local remote
  remote=$(git remote | tr "\n" "/" | sed "s/.$//" 2>/dev/null)

  if [[ -n $remote ]]; then
    hook_com[branch]="${remote}/${hook_com[branch]}"
    hook_com[branch]="${hook_com[branch]}"
  fi
}

# Show untracked files indicator
function +vi-git-untracked() {
  local untracked
  untracked=$(git ls-files --other --exclude-standard 2>/dev/null)

  if [[ -n $untracked ]]; then
    hook_com[misc]="%F{red}"
  fi
}

# Show number of stashed changes.
function +vi-git-stash() {
  local -a stashes

  if [[ -s ${hook_com[base]}/.git/refs/stash ]]; then
    stashes=(${(@f)$(git stash list 2>/dev/null)})
    # Sometimes refs/stash exists even with 0 stashes
    # Make sure we have at least 1 stash before adding this info
    if (( ${#stashes} )); then
      hook_com[misc]+="${#stashes}s/"
    fi
  fi
}

add-zsh-hook precmd vcs_info

# }}}

# Autocomplete {{{

autoload -Uz compinit
compinit

zstyle ":completion::complete:*" use-cache on
zstyle ":completion:*" cache-path ~/.cache/zsh
zstyle ":completion:*" completer _expand _complete _ignored _approximate
zstyle ":completion:*" matcher-list "m:{a-zA-Z}={A-Za-z}" "r:|[._-]=* r:|=*" "l:|=* r:|=*"
zstyle ":completion:*" menu select
zstyle ":completion:*:cd:*" tag-order local-directories directory-stack path-directories

# }}}

# History {{{

setopt append_history
setopt inc_append_history
setopt extended_history
setopt share_history
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt hist_find_no_dups
setopt hist_reduce_blanks
setopt hist_save_no_dups

HISTCONTROL="erasedups:ignorespace"
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
HISTFILESIZE=2000000

# }}}

# Title {{{

DISABLE_AUTO_TITLE="true"

function set-window-title() {
  # echo -ne "\e]0;${USER}:${PWD}\a"
  local FULL_COMMAND="$2 "
  if [[ ! -z "$FULL_COMMAND" && "$FULL_COMMAND" != "" && "$FULL_COMMAND" != " " ]]; then
    local PROCESS_NAME=${${=FULL_COMMAND}[1]}
    echo -ne "\e]0;${PROCESS_NAME}\a"
  else
    echo -ne "\e]0;${USER}\a"
  fi
}

add-zsh-hook chpwd set-window-title
add-zsh-hook precmd set-window-title
add-zsh-hook preexec set-window-title

# }}}

# Prompt {{{

autoload -Uz promptinit
promptinit
autoload -Uz colors
colors

PROMPT="#! %1d %%%{$reset_color%} "
RPROMPT='$vcs_info_msg_0_'

# }}}

# Ensure unique path {{{

typeset -gU cdpath fpath mailpath path

# }}}

# NVM {{{

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"

# }}}

# SK {{{

# source <(fzf --zsh)
export SKIM_DEFAULT_COMMAND='fd --type file --hidden --no-ignore'
export SKIM_DEFAULT_OPTIONS="$SKIM_DEFAULT_OPTIONS \
  --ansi \
  --layout=reverse \
"

sk-history-widget() {
  local selected
  selected=$(fc -ln 0 | sk) || return
  local ret=$?
  eval 'LBUFFER="$LBUFFER$selected"'
  zle reset-prompt
  return $ret
}
zle     -N            sk-history-widget
bindkey -M emacs '^R' sk-history-widget
bindkey -M vicmd '^R' sk-history-widget
bindkey -M viins '^R' sk-history-widget

sk-project-widget() {
  local selected
  selected=$(fd --type dir --max-depth 2 --search-path $HOME/Projects | sk) || return
  local ret=$?
  eval 'cd $selected'
  zle reset-prompt
  return $ret
}
zle     -N            sk-project-widget
bindkey -M emacs '^E' sk-project-widget
bindkey -M vicmd '^E' sk-project-widget
bindkey -M viins '^E' sk-project-widget

sk-tmux-session-widget() {
  local selected
  selected=$(tmux list-session -F "#{session_name}" | sk) || return
  local ret=$?
  eval 'tmux attach -t $selected'
  zle reset-prompt
  return $ret
}
zle     -N            sk-tmux-session-widget
bindkey -M emacs '^T' sk-tmux-session-widget
bindkey -M vicmd '^T' sk-tmux-session-widget
bindkey -M viins '^T' sk-tmux-session-widget

# }}}
