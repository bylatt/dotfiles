" github.com/clozed2u :: @clozed2u
" http://clozed2u.com

" Initial {{{

if &compatible
  set nocompatible
endif

" }}}

" Plugins {{{

if !isdirectory($HOME.'/.vim/bundle/repos/github.com/shougo/dein.vim')
  sil !git clone -q https://github.com/shougo/dein.vim.git $HOME/.vim/bundle/repos/github.com/shougo/dein.vim
endif

set rtp+=$HOME/.vim/bundle/repos/github.com/shougo/dein.vim
if dein#load_state(expand($HOME.'/.vim/bundle'))
  call dein#begin(expand($HOME.'/.vim/bundle'))
  call dein#add('shougo/dein.vim')
  call dein#add('wellle/targets.vim')
  call dein#add('tpope/vim-rsi')
  call dein#add('tpope/vim-eunuch')
  call dein#add('tpope/vim-repeat')
  call dein#add('tpope/vim-abolish')
  call dein#add('tpope/vim-dispatch')
  call dein#add('tpope/vim-fugitive')
  call dein#add('tpope/vim-markdown')
  call dein#add('tpope/vim-surround')
  call dein#add('tpope/vim-commentary')
  call dein#add('justinmk/vim-dirvish')
  call dein#add('junegunn/vim-easy-align')
  call dein#add('terryma/vim-expand-region')
  call dein#add('fatih/vim-go')
  call dein#add('janko-m/vim-test')
  call dein#add('sickill/vim-pasta')
  call dein#add('vim-ruby/vim-ruby')
  call dein#add('pangloss/vim-javascript')
  call dein#add('mxw/vim-jsx')
  call dein#add('christoomey/vim-tmux-navigator')
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

com PluginUpdate call dein#update()

  " Filetype detection {{{2

    filetype on
    filetype plugin on
    filetype indent on

  " }}}

" }}}

" PluginSettings {{{

  " Test {{{2

  let g:test#strategy='basic'
  let g:test#preserve_screen=0

  nm <silent> <leader>n :TestNearest<cr>
  nm <silent> <leader>f :TestFile<cr>
  nm <silent> <leader>l :TestLast<cr>

  " }}}

  " Go {{{2

  let g:go_fmt_command="goimports"

  " Highlight
  " let g:go_highlight_functions=1
  " let g:go_highlight_methods=1
  " let g:go_highlight_structs=1
  " let g:go_highlight_operators=1
  " let g:go_highlight_build_constraints=1

  " }}}

  " JSX {{{2

  let g:jsx_ext_required=0

  " }}}

  " NERDTree {{{2

  nn <leader>w :NERDTreeToggle<enter>
  nn <silent> <leader>v :NERDTreeFind<cr>
  let NERDTreeQuitOnOpen=1
  let NERDTreeAutoDeleteBuffer=1
  let NERDTreeMinimalUI=1
  let NERDTreeDirArrows=1

  " }}}

  " EasyAlign {{{2

  xm ga <plug>(EasyAlign)
  nm ga <plug>(EasyAlign)

  " }}}

" }}}

" Environment {{{

  set encoding=utf-8
  set fileencoding=utf-8
  set termencoding=utf-8
  set nobomb
  set shell=zsh

  " Backup and undos {{{2

    set noswapfile
    set writebackup
    set backupdir=$HOME/.vim/backup
    set undofile
    set undodir=$HOME/.vim/undo
    set undolevels=1000
    set undoreload=10000
    set directory=$HOME/.vim/tmp

  " }}}

  set tags=./tags

  " Autoread and write files {{{2

    set autoread
    set autowrite
    set autowriteall

  " }}}

  set mouse=a

  " Use rg for grep {{{2

    set grepprg=rg\ -i\ --vimgrep

  " }}}

  " Enable clipboard {{{2

    let s:kernel = system('echo -n "$(uname -s)"')
    if s:kernel == 'Darwin'
      set clipboard=unnamed
    elseif s:kernel == 'Linux'
      set clipboard=unnamedplus
    endif

  " }}}

" }}}

" Appearance {{{

  " Color {{{2

    set t_Co=256
    syntax on
    set background=dark
    colo grb
    " colo default

  " }}}

  " " Enhance default {{{2

  "   hi DiffAdd    ctermfg=0 ctermbg=2
  "   hi DiffChange ctermfg=0 ctermbg=3
  "   hi DiffDelete ctermfg=0 ctermbg=1
  "   hi DiffText   ctermfg=0 ctermbg=11 cterm=bold

  "   hi Visual     ctermfg=NONE ctermbg=NONE cterm=inverse

  "   if &background == "light"
  "     hi LineNr      ctermfg=7
  "     hi Comment     ctermfg=7
  "     hi ColorColumn ctermfg=8 ctermbg=7
  "     hi Folded      ctermfg=8 ctermbg=7
  "     hi FoldColumn  ctermfg=8 ctermbg=7
  "     hi Pmenu       ctermfg=0 ctermbg=7
  "     hi PmenuSel    ctermfg=7 ctermbg=0
  "     hi SpellCap    ctermbg=7
  "   else
  "     hi LineNr      ctermfg=8
  "     hi Comment     ctermfg=8
  "     hi ColorColumn ctermfg=7 ctermbg=8
  "     hi Folded      ctermfg=7 ctermbg=8
  "     hi FoldColumn  ctermfg=7 ctermbg=8
  "     hi Pmenu       ctermfg=15 ctermbg=8
  "     hi PmenuSel    ctermfg=8 ctermbg=15
  "     hi SpellCap    ctermbg=8
  "   endif

  " " }}}

  " Extra whitespace: {{{2

    hi SpecialKey guibg=NONE ctermbg=NONE
    hi ExtraWhitespace ctermbg=1 guibg=red
    match ExtraWhitespace /\s\+$/
    aug HighlightExtraWhitespace
      au!
      au BufWinEnter * match ExtraWhitespace /\s\+$/
      au * match ExtraWhitespace /\s\+\%#\@<!$/
      au * match ExtraWhitespace /\s\+$/
      au BufWinLeave * call clearmatches()
    aug end

  " }}}

  set linespace=0
  set shortmess=atToOI
  set viewoptions+=unix,slash
  set noshowmode
  set showcmd
  set cmdheight=1
  set showtabline=0
  set hidden
  set number
  set norelativenumber
  set noshowmatch
  set matchtime=0
  set nowrap
  set listchars=tab:\ \ ,eol:\ ,trail:•,nbsp:.
  set list
  set scrolloff=0
  set synmaxcol=1000
  set nocursorline
  set nocursorcolumn

  " Nicer netrw {{{2

    let g:netrw_altv=1
    let g:netrw_banner=0
    let g:netrw_preview=1
    let g:netrw_winsize=25
    let g:netrw_liststyle=3
    let g:netrw_browse_split=0
    let g:netrw_list_hide=&wildignore

  " }}}

  " Nicer statusline {{{2

    set laststatus=2

    let g:modes={
          \ 'n':  'Normal',
          \ 'no': 'N·Operator Pending',
          \ 'v':  'Visual',
          \ 'V':  'V·Line',
          \ '^V': 'V·Block',
          \ 's':  'Select',
          \ 'S':  'S·Line',
          \ '^S': 'S·Block',
          \ 'i':  'Insert',
          \ 'R':  'Replace',
          \ 'Rv': 'V·Replace',
          \ 'c':  'Command',
          \ 'cv': 'Vim Ex',
          \ 'ce': 'Ex',
          \ 'r':  'Prompt',
          \ 'rm': 'More',
          \ 'r?': 'Confirm',
          \ '!':  'Shell',
          \ 't':  'Terminal'}

    fun! STLine()
      let curline=line('.')
      let curcol=len(curline)
      let allcol=len(line('$'))
      let cols=allcol-curcol
      if allcol<=2
        let cols+=1
      endif
      let padding=repeat(" ", cols+1)
      let linenum=padding.curline
      retu linenum
    endf

    fun! STFileType()
      if &filetype != ''
        retu '  :: '.tolower(&filetype)
      else
        retu ''
    endf

    fun! STMode()
      retu tolower(g:modes[mode()])
    endf

    fun! STFilePath()
      let filepath=expand('%:p')
      if len(filepath) !=# 0
        retu '  » '.filepath
      endif
      retu ''
    endf

    fun! STModified()
      if &mod ==# 1
        retu '  [modified]'
      endif
      retu ''
    endf

    set statusline=%{STLine()}%{STFilePath()}%{STModified()}%=%{STMode()}\%{STFileType()}

  " }}}

  " Per language settings {{{2

    aug LanguageSpecific
      au!
      au filetype vim setlocal foldmethod=marker foldlevel=0
      au filetype zsh setlocal foldmethod=marker foldlevel=0
      au filetype php setlocal shiftwidth=4 tabstop=4 softtabstop=4 foldmethod=syntax
      au filetype ruby setlocal foldmethod=syntax
      au filetype make setlocal noexpandtab tabstop=4 softtabstop=4
      au filetype python setlocal nosmartindent tabstop=4 softtabstop=4 shiftwidth=4
      au filetype javascript,javascript.jsx setlocal foldmethod=syntax
    aug end

  " }}}

" }}}

" Editing {{{

  " Use spaces instead of tabs and auto indent {{{2

    set backspace=2
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set shiftround
    set expandtab
    set smarttab
    set autoindent
    set smartindent
    " set cinoptions=>4,l1,p0,)50,*50,t0

  " }}}


  " Completion {{{2

    set wildmenu
    " set wildmode=list:longest
    set wildmode=longest,list,full
    set wildignore=
      \*.png,
      \*.jpg,
      \*.gif,
      \*.gem,
      \*.swp,
      \*.zip,
      \*.gz,
      \*/.DS_Store/*,
      \*/tmp/*,
      \*/node_modules/*,
      \*/bower_components/*,
      \*/vendor/*,
      \*/.gem/*,
      \*/.git/*,
      \*/.hg/*,
      \*/.svn/*
    set wildignorecase

  " }}}

  " Search {{{2

    set ignorecase
    set smartcase
    set infercase
    set incsearch
    set hlsearch

  " }}}

  " Split and join {{{2

    set nojoinspaces
    set splitbelow
    set splitright

  " }}}

  " Timeout {{{2

    set timeout
    set timeoutlen=5000
    set ttimeout
    set ttimeoutlen=0
    set ttyfast

  " }}}

  " Completion {{{2

    set omnifunc=syntaxcomplete#Complete
    set completefunc=syntaxcomplete#Complete
    set completeopt=longest,menuone
    " set complete=.,w,b,u,t,i
    set complete-=i

  " }}}

  " Folding {{{2

    set foldenable
    " set foldmethod=indent
    set foldmethod=manual
    set foldlevel=1000

  " }}}

  " Trim trailing white space {{{2

    fun! RemoveTrailingWhitespaces()
      if !&binary && &filetype != 'diff'
        :%s/\s\+$//e
      endif
    endf

    aug RemoveTrailingWhitespaces
      au!
      au BufWritePre * call RemoveTrailingWhitespaces()
    aug end

  " }}}

  " Focus on the line from last open {{{2

    aug FocusLastLine
      au!
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
    aug end

  " }}}

  " Disable automatic comment insertion {{{2

    aug DisableAutoComment
      au!
      au filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    aug end

  " }}}

  " Better tab {{{2

    fun! InsertTabWrapper()
      let col = col('.') - 1
      if !col || getline('.')[col - 1] !~ '\k'
        retu "\<tab>"
      else
        retu "\<c-p>"
      endif
    endf

    ino <expr> <silent> <tab> InsertTabWrapper()

  " }}}

" }}}

" Mappings {{{

" Prefer spaces for leader
let mapleader = "\<space>"

  " Modes {{{2

    nn j gj
    nn k gk
    nn qq :q!<cr>
    nn ; :
    nn <cr> :nohlsearch<cr>

    vm <  <gv
    vm > >gv

  " }}}

  " Navigation {{{2

    nn <c-j> <c-w>j
    nn <c-k> <c-w>k
    nn <c-h> <c-w>h
    nn <c-l> <c-w>l

  " }}}

  " QuickRun {{{2

    aug QuickRun
      au!
      au filetype go nn <buffer> <leader>m :!go run %<cr>
      au filetype php nn <buffer> <leader>m :!php %<cr>
      au filetype ruby nn <buffer> <leader>m :!ruby %<cr>
      au filetype python nn <buffer> <leader>m :!python3 %<cr>
      au filetype javascript nn <buffer> <leader>m :!node %<cr>
    aug end

  " }}}

  " Split {{{2

    nn <leader>- <c-w>_<cr>
    nn <leader>= <c-w>=<cr>

  " }}}

" }}}

" Fuzzy {{{

fun! FuzzyCommand(choice_command, vim_command)
  try
    let selection = system(a:choice_command . " | fzy -l 18")
  cat /Vim:Interrupt/
    redr!
    retu
  endt
  redr!
  if v:shell_error == 0 && !empty(selection)
    exe a:vim_command . " " . selection
  endif
endf

nn <leader>p :call FuzzyCommand("fd -t f .", ":e")<cr>

fun! FuzzyBuffer()
  let bufnrs = filter(range(1, bufnr("$")), 'buflisted(v:val)')
  let buffers = map(bufnrs, 'bufname(v:val)')
  call FuzzyCommand('echo "' . join(buffers, "\n") . '"', ":b")
endf

nn <leader>o :call FuzzyBuffer()<cr>

" }}}

" Note {{{

" ** Default vim key binding for autocomplete
" <c-x><c-f> for path completion
" <c-x><c-k> for dictionary conpletion
" <c-x><c-l> for whole line completion
" <c-x><c-o> for omnifunc completion
" <c-x><c-u> for completefunc completion
" <c-x><c-]> for tag conpletion
" <c-x><c-n> for keyword in current file
" <c-x><c-v> for vim command line
" <c-n> for completion for next match keyword
" <c-p> for completion for previous match keyword
" ** When stage is on option list
" <c-n> for next option
" <c-p> for previous option

" }}}
