" github.com/clozed2u :: @clozed2u
" http://clozed2u.com

" Initial {{{

set nocompatible

" }}}

" Plugins {{{

if !filereadable(expand($HOME.'/.vim/autoload/plug.vim'))
  silent !curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin($HOME.'/.vim/plug')
  Plug '$HOMEBREW/opt/fzf'
  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'terryma/vim-expand-region'
  Plug 'pangloss/vim-javascript'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'sgur/vim-editorconfig'
  Plug 'isa/vim-matchit'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'janko/vim-test'
  Plug 'andreypopp/vim-colors-plain'
  Plug 'natebosch/vim-lsc'
  Plug 'lifepillar/vim-mucomplete'
call plug#end()

filetype plugin indent on

" }}}

" Mappings {{{

" Prefer spaces for leader
let mapleader = "\<space>"

  " Modes {{{2

    nnoremap j gj
    nnoremap k gk
    nnoremap ; :
    nnoremap <cr> :nohlsearch<cr>

    vmap <  <gv
    vmap > >gv

  " }}}

  " Navigation {{{2

    nnoremap <c-j> <c-w>j
    nnoremap <c-k> <c-w>k
    nnoremap <c-h> <c-w>h
    nnoremap <c-l> <c-w>l

  " }}}

  " QuickRun {{{2

    augroup QuickRun
      autocmd!
      autocmd filetype go nnoremap <buffer> <leader>m :!go run %<cr>
      autocmd filetype python nnoremap <buffer> <leader>m :!python3 %<cr>
      autocmd filetype javascript nnoremap <buffer> <leader>m :!node %<cr>
    augroup end

  " }}}

  " Split {{{2

    nnoremap <leader>- <c-w>_<cr>
    nnoremap <leader>= <c-w>=<cr>

  " }}}

" }}}

" PluginSettings {{{

  " FZF {{{2

    nnoremap <silent> <leader>p :call fzf#run({'sink': 'e'})<cr>
    nnoremap <silent> <leader>o :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'e'})<cr>

  " }}}

  " LSC {{{2
    let g:lsc_auto_map=v:true
    let g:lsc_server_commands={
          \ 'python': 'pyls',
          \ 'go': {'command': 'gopls serve', 'log_level': -1, 'suppress_stderr': v:true},
          \ 'rust': 'rls',
          \ 'javascript': 'typescript-language-server --stdio',
          \ 'javascript.jsx': 'typescript-language-server --stdio',
          \ }
  " }}}

  " Mucomplete {{{2

    let g:mucomplete#enable_auto_at_startup=1
    let g:mucomplete#completion_delay=1

  " }}}

" }}}

" Environment {{{

  set encoding=utf-8
  set fileencoding=utf-8
  set termencoding=utf-8
  set nobomb
  set shell=zsh

  " Backup and undos {{{2

    set noswapfile
    set writebackup
    set backupdir=$HOME/.vim/backup
    set undofile
    set undodir=$HOME/.vim/undo
    set undolevels=1000
    set undoreload=10000
    set directory=$HOME/.vim/tmp

  " }}}

  " Autoread and write files {{{2

    set autoread
    set autowrite
    set autowriteall

  " }}}

  set mouse=a

  " Use rg for grep {{{2

    set grepprg=rg\ -i\ --vimgrep
    set grepformat=%f:%l:%c:%m

  " }}}

  " Enable clipboard {{{2

    let g:clipboard={
          \ 'name': 'pbcopy',
          \ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
          \ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
          \ 'cache_enabled': 0 }
    set clipboard=unnamed

  " }}}

" }}}

" Appearance {{{

  " Color {{{2

    set t_Co=256
    syntax on
    set background=dark
    " set termguicolors
    set guicursor=
    color plain
    " Make StatusLine of plain colorscheme more clearer
    highlight StatusLine ctermfg=255

  " }}}

  " " Extra whitespace: {{{2

  "   highlight SpecialKey guibg=NONE ctermbg=NONE
  "   highlight ExtraWhitespace ctermbg=1 guibg=red
  "   match ExtraWhitespace /\s\+$/
  "   augroup HighlightExtraWhitespace
  "     autocmd!
  "     autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  "     autocmd * match ExtraWhitespace /\s\+\%#\@<!$/
  "     autocmd * match ExtraWhitespace /\s\+$/
  "     autocmd BufWinLeave * call clearmatches()
  "   augroup end

  " " }}}

  set linespace=0
  set shortmess=atToOI
  set shortmess+=c
  set belloff+=ctrlg
  set viewoptions+=unix,slash
  set noshowmode
  set showcmd
  set cmdheight=1
  set showtabline=0
  set hidden
  set number
  set norelativenumber
  set noshowmatch
  set matchtime=0
  set nowrap
  set listchars=tab:\ \ ,eol:\ ,trail:•,nbsp:.
  set list
  set scrolloff=0
  set synmaxcol=1000
  set nocursorline
  set nocursorcolumn
  set signcolumn=no

  " Nicer netrw {{{2

    let g:netrw_menu=0
    let g:netrw_banner=0
    let g:netrw_altv=1
    let g:netrw_bannoremaper=0
    let g:netrw_preview=1
    let g:netrw_winsize=25
    let g:netrw_liststyle=3
    let g:netrw_browse_split=0
    let g:netrw_list_hide=&wildignore

  " }}}

  " Nicer statusline {{{2

    set laststatus=2

    let g:modes={
          \ 'n':  'Normal',
          \ 'no': 'N·Operator Pending',
          \ 'v':  'Visual',
          \ 'V':  'V·Line',
          \ '': 'V·Block',
          \ 's':  'Select',
          \ 'S':  'S·Line',
          \ '^S': 'S·Block',
          \ 'i':  'Insert',
          \ 'R':  'Replace',
          \ 'Rv': 'VReplace',
          \ 'c':  'Command',
          \ 'cv': 'Vim Ex',
          \ 'ce': 'Ex',
          \ 'r':  'Prompt',
          \ 'rm': 'More',
          \ 'r?': 'Confirm',
          \ '!':  'Shell',
          \ 't':  'Terminal' }

    function! ST_line_num()
      let curline=line('.')
      let curcol=len(curline)
      let allcol=len(line('$'))
      if allcol<=3
        let allcol=3
      endif
      let cols=allcol-curcol
      let padding=repeat(' ', cols+1)
      let linenum=padding.curline
      return linenum
    endfunction

    function! ST_filetype()
      if &filetype != ''
        return tolower(&filetype)
      else
        return ''
    endfunction

    function! ST_filetype_with_symbol()
      let ft=ST_filetype()
      if len(ft) !=# 0
        return '  :: '.ft
      endif
      return ''
    endfunction

    function! ST_mode()
      return tolower(g:modes[mode()])
    endfunction

    function! ST_filepath()
      let filepath=expand('%:p')
      if len(filepath) !=# 0
        return filepath
      endif
      return ''
    endfunction

    function! ST_filepath_with_symbol()
      let fp=ST_filepath()
      if len(fp) !=# 0
        return '  » '.fp
      endif
      return ''
    endfunction

    function! ST_modified()
      if &mod ==# 1
        return '  [modified] '
      endif
      return ''
    endfunction

    set statusline=%{ST_line_num()}\%{ST_filepath_with_symbol()}\%{ST_modified()}%=%{ST_mode()}\%{ST_filetype_with_symbol()}

  " }}}

  " Per language settings {{{2

    augroup LanguageSpecific
      autocmd!
      autocmd filetype vim setlocal foldmethod=marker foldlevel=0
      autocmd filetype zsh setlocal foldmethod=marker foldlevel=0
      autocmd filetype php setlocal shiftwidth=4 tabstop=4 softtabstop=4 foldmethod=syntax
      autocmd filetype ruby setlocal foldmethod=syntax
      autocmd filetype make setlocal noexpandtab tabstop=4 softtabstop=4
      autocmd filetype python setlocal nosmartindent tabstop=4 softtabstop=4 shiftwidth=4
      autocmd filetype javascript,javascript.jsx setlocal foldmethod=syntax
    augroup end

  " }}}

" }}}

" Editing {{{

  " Use spaces instead of tabs and auto indent {{{2

    set backspace=2
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set shiftround
    set expandtab
    set smarttab
    set autoindent
    set smartindent
    " set cinoptions=>4,l1,p0,)50,*50,t0

  " }}}


  " Completion {{{2

    set wildmenu
    " set wildmode=list:longest
    set wildmode=longest,list,full
    set wildignore=
      \*.png,
      \*.jpg,
      \*.gif,
      \*.gem,
      \*.swp,
      \*.zip,
      \*.gz,
      \*/.DS_Store/*,
      \*/tmp/*,
      \*/node_modules/*,
      \*/bower_components/*,
      \*/vendor/*,
      \*/.gem/*,
      \*/.git/*,
      \*/.hg/*,
      \*/.svn/*
    set wildignorecase

  " }}}

  " Search {{{2

    set ignorecase
    set smartcase
    set infercase
    set incsearch
    set hlsearch

  " }}}

  " Split and join {{{2

    set nojoinspaces
    set splitbelow
    set splitright

  " }}}

  " Timeout {{{2

    set timeout
    set timeoutlen=5000
    set ttimeout
    set ttimeoutlen=0
    set ttyfast

  " }}}

  " Completion {{{2

    set omnifunc=syntaxcomplete#Complete
    set completefunc=syntaxcomplete#Complete
    " set completeopt=longest,menu,menuone,noinsert,noselect
    set completeopt=menu,menuone,noinsert,noselect
    " set complete=.,w,b,u,t,i
    set complete-=i

  " }}}

  " Folding {{{2

    set foldenable
    " set foldmethod=indent
    set foldmethod=manual
    set foldlevel=1000

  " }}}

  " Focus on the line from last open {{{2

    augroup FocusLastLine
      autocmd!
      autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"" | endif
    augroup end

  " }}}

  " Disable automatic comment insertion {{{2

    augroup DisableAutoComment
      autocmd!
      autocmd filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    augroup end

  " }}}

" }}}

" Note {{{

" ** Default vim key binding for autocomplete
" <c-x><c-f> for path completion
" <c-x><c-k> for dictionary conpletion
" <c-x><c-l> for whole line completion
" <c-x><c-o> for omnifunc completion
" <c-x><c-u> for completefunc completion
" <c-x><c-]> for tag conpletion
" <c-x><c-n> for keyword in current file
" <c-x><c-v> for vim command line
" <c-n> for completion for next match keyword
" <c-p> for completion for previous match keyword
" <c-n> for next option
" <c-p> for previous option

" }}}
