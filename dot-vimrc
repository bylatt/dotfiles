" vim: set sw=2 ts=2 sts=0 et fdm=marker :nospell:

" Initial {{{

set nocompatible

" }}}

" Plugins {{{

if !filereadable(expand($HOME.'/.vim/autoload/plug.vim'))
  silent !curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin($HOME.'/.vim/plug')
  Plug '$HOMEBREW/opt/fzf'
  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'terryma/vim-expand-region'
  Plug 'pangloss/vim-javascript'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'sgur/vim-editorconfig'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'lifepillar/vim-gruvbox8'
  Plug 'lifepillar/vim-solarized8'
  Plug 'noahfrederick/vim-noctu'
  Plug 'janko/vim-test'
  Plug 'justinmk/vim-sneak'
  Plug 'chiel92/vim-autoformat'
  Plug 'andymass/vim-matchup'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'shougo/defx.nvim', {'do': ':UpdateRemotePlugins'}
  " Plug 'shougo/denite.nvim', {'do': ':UpdateRemotePlugins'}
  " Plug 'shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
call plug#end()

filetype plugin indent on

" }}}

" Mappings {{{

" Prefer spaces for leader
let mapleader = "\<space>"

  " Modes {{{2

    nnoremap j gj
    nnoremap k gk
    nnoremap ; :
    nnoremap <cr> :nohlsearch<cr>

    vmap <  <gv
    vmap > >gv

  " }}}

  " Navigation {{{2

    nnoremap <c-j> <c-w>j
    nnoremap <c-k> <c-w>k
    nnoremap <c-h> <c-w>h
    nnoremap <c-l> <c-w>l

  " }}}

  " QuickRun {{{2

    augroup QuickRun
      autocmd!
      autocmd filetype go nnoremap <buffer> <leader>m :!go run %<cr>
      autocmd filetype ruby nnoremap <buffer> <leader>m :!ruby %<cr>
      autocmd filetype python nnoremap <buffer> <leader>m :!python3 %<cr>
      autocmd filetype javascript nnoremap <buffer> <leader>m :!node %<cr>
    augroup end

  " }}}

  " Split {{{2

    nnoremap <leader>s :sp<cr>
    nnoremap <leader>v :vsp<cr>

  " }}}

" }}}

" PluginSettings {{{
  " Test {{{2

    noremap <silent><leader>a :TestNearest<cr>
    noremap <silent><leader>s :TestFile<cr>

  " }}}


  " Coc {{{2

    let g:coc_global_extensions=[
          \ 'coc-tsserver',
          \ 'coc-python',
          \ 'coc-rls',
          \ 'coc-clangd',
          \ 'coc-go',
          \ 'coc-json',
          \ 'coc-css',
          \ 'coc-dictionary',
          \ 'coc-lists',
          \ ]

    inoremap <silent><expr> <tab>
          \ pumvisible() ? "\<c-n>" :
          \ <sid>check_back_space() ? "\<tab>" :
          \ coc#refresh()
    inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<c-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

  " }}}

  " Defx {{{2

    autocmd filetype defx call s:defx_my_settings()

    noremap <silent><leader>f :Defx<cr>

    call defx#custom#option('_', {
          \ 'winwidth': 45,
          \ 'columns': 'mark:indent:filename',
          \ 'split': 'vertical',
          \ 'direction': 'topleft',
          \ 'show_ignored_files': v:true,
          \ 'buffer_name': '',
          \ 'toggle': v:true,
          \ 'resume': v:true,
          \ 'root_marker': ':: ',
          \ })

    function! s:defx_my_settings() abort
      setl nospell
      setl signcolumn=no
      setl nonumber
      nnoremap <silent><buffer><expr> <cr> defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('drop')
      nnoremap <silent><buffer><expr> c defx#do_action('copy')
      nnoremap <silent><buffer><expr> p defx#do_action('paste')
      nnoremap <silent><buffer><expr> m defx#do_action('rename')
      nnoremap <silent><buffer><expr> d defx#do_action('remove')
      nnoremap <silent><buffer><expr> a defx#do_action('new_multiple_files')
      nnoremap <silent><buffer><expr> s defx#do_action('open', 'vsplit')
      nnoremap <silent><buffer><expr> u defx#do_action('cd', ['..'])
      nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
      nnoremap <silent><buffer><expr> <space> defx#do_action('toggle_select')
      nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
      nnoremap <silent><buffer><expr> r defx#do_action('redraw')
    endfunction

    function! s:isdir(dir) abort
      return !empty(a:dir) && (isdirectory(a:dir) || (!empty($SYSTEMDRIVE) && isdirectory('/'.tolower($SYSTEMDRIVE[0]).a:dir)))
    endfunction
    autocmd VimEnter * sil! au! FileExplorer *
    autocmd BufEnter * if s:isdir(expand('%')) | bd | exe 'Defx' | endif

  " }}}

  " FZF {{{2

    nnoremap <silent> <leader>p :call fzf#run({'sink': 'e'})<cr>
    nnoremap <silent> <leader>o :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'e'})<cr>

  " }}}

  " " Denite {{{2

  "   call denite#custom#var('file/rec', 'command', ['fd', '--type', 'file', '--follow', '--hidden', '--exclude', '.git', '.'])
  "   call denite#custom#source('grep', 'vars', {
  "         \ 'command': ['rg'],
  "         \ 'default_opts': ['--hidden', '--vimgrep', '--heading', '-S'],
  "         \ 'recursive_opts': [],
  "         \ 'pattern_opt': ['--regexp'],
  "         \ 'separator': ['--'],
  "         \ 'final_opts': [],
  "         \ })
  "   call denite#custom#var('buffer', 'date_format', '')

  "   call denite#custom#option('_', {
  "         \ 'split': 'floating',
  "         \ 'start_filter': v:true,
  "         \ 'auto_resize': v:false,
  "         \ 'source_names': 'short',
  "         \ 'prompt': '',
  "         \ 'statusline': v:false,
  "         \ 'highlight_matched_char': 'WildMenu',
  "         \ 'highlight_matched_range': 'Visual',
  "         \ 'highlight_window_background': 'Visual',
  "         \ 'highlight_filter_background': 'StatusLine',
  "         \ 'highlight_prompt': 'StatusLine',
  "         \ 'winrow': v:true,
  "         \ 'vertical_preview': v:true,
  "         \ })

  "   autocmd FileType denite-filter call s:denite_filter_my_settings()
  "   function! s:denite_filter_my_settings() abort
  "     imap <silent><buffer> <c-o> <Plug>(denite_filter_quit)
  "     inoremap <silent><buffer><expr> <esc> denite#do_map('quit')
  "     nnoremap <silent><buffer><expr> <esc> denite#do_map('quit')
  "     inoremap <silent><buffer><expr> <cr> denite#do_map('do_action')
  "   endfunction

  "   autocmd FileType denite call s:denite_my_settings()
  "   function! s:denite_my_settings() abort
  "     nnoremap <silent><buffer><expr> <cr> denite#do_map('do_action')
  "     nnoremap <silent><buffer><expr> q denite#do_map('quit')
  "     nnoremap <silent><buffer><expr> <esc> denite#do_map('quit')
  "     nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
  "     nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
  "     nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
  "     nnoremap <silent><buffer><expr> <c-o> denite#do_map('open_filter_buffer')
  "   endfunction

  "   noremap <silent> <leader>p :Denite file/rec<cr>
  "   noremap <silent> <leader>b :Denite buffer<cr>
  "   noremap <silent> <leader>l :Denite line<cr>
  "   noremap <silent> <leader>t :Denite filetype<cr>

  " " }}}

  " " Deoplete {{{2

  "   let g:deoplete#enable_at_startup=1
  "   function! s:check_back_space() abort
  "     let col = col('.') - 1
  "     return !col || getline('.')[col - 1]  =~ '\s'
  "   endfunction
  "   inoremap <silent><expr> <tab> pumvisible() ? "\<c-n>" : <sid>check_back_space() ? "\<tab>" : deoplete#manual_complete()

  " " }}}

  " Autoformat {{{2

    let g:formatters_go=['goimports', 'gofmt_2']
    let g:formatters_rust=['rustfmt']
    let g:formatters_python=['black']
    let g:formatters_html=['prettier']
    let g:formatters_css=['prettier']
    let g:formatters_javascript=['prettier']
    autocmd BufWrite *.go,*.rs,*.py,*.html,*.css,*.js :Autoformat

  " }}}

" }}}

" Environment {{{

  set encoding=utf-8
  set fileencoding=utf-8
  set termencoding=utf-8
  set nobomb
  set shell=zsh

  " Backup and undos {{{2

    set noswapfile
    set writebackup
    set backupdir=$HOME/.vim/backup
    set undofile
    set undodir=$HOME/.vim/undo
    set undolevels=1000
    set undoreload=10000
    set directory=$HOME/.vim/tmp

  " }}}

  " Autoread and write files {{{2

    set autoread
    set autowrite
    set autowriteall

  " }}}

  set mouse=a

  " Use rg for grep {{{2

    set grepprg=rg\ -i\ --vimgrep
    set grepformat=%f:%l:%c:%m

  " }}}

  " Enable clipboard {{{2

    let g:clipboard={
          \ 'name': 'pbcopy',
          \ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
          \ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
          \ 'cache_enabled': 0 }
    set clipboard=unnamed

  " }}}

" }}}

" Appearance {{{

  " Color {{{2

    set t_Co=256
    syntax on
    set background=dark
    " set termguicolors
    set guicursor=
    color noctu

  " }}}

  " " Extra whitespace: {{{2

  "   highlight SpecialKey guibg=NONE ctermbg=NONE
  "   highlight ExtraWhitespace ctermbg=1 guibg=red
  "   match ExtraWhitespace /\s\+$/
  "   augroup HighlightExtraWhitespace
  "     autocmd!
  "     autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  "     autocmd * match ExtraWhitespace /\s\+\%#\@<!$/
  "     autocmd * match ExtraWhitespace /\s\+$/
  "     autocmd BufWinLeave * call clearmatches()
  "   augroup end

  " " }}}

  set linespace=0
  set shortmess=atToOI
  set shortmess+=c
  set belloff+=ctrlg
  set viewoptions+=unix,slash
  set noshowmode
  set showcmd
  set cmdheight=1
  set showtabline=0
  set hidden
  set number
  set norelativenumber
  set noshowmatch
  set matchtime=0
  set nowrap
  set listchars=tab:\ \ ,eol:\ ,trail:•,nbsp:.
  set list
  set scrolloff=0
  set synmaxcol=1000
  set nocursorline
  set nocursorcolumn
  set signcolumn=no

  " Nicer netrw {{{2

    let g:netrw_menu=0
    let g:netrw_banner=0
    let g:netrw_altv=1
    let g:netrw_bannoremaper=0
    let g:netrw_preview=1
    let g:netrw_winsize=25
    let g:netrw_liststyle=3
    let g:netrw_browse_split=0
    let g:netrw_list_hide=&wildignore

  " }}}

  " Nicer statusline {{{2

    set laststatus=2

    let g:modes={
          \ 'n':  'Normal',
          \ 'no': 'N·Operator Pending',
          \ 'v':  'Visual',
          \ 'V':  'V·Line',
          \ '': 'V·Block',
          \ 's':  'Select',
          \ 'S':  'S·Line',
          \ '^S': 'S·Block',
          \ 'i':  'Insert',
          \ 'R':  'Replace',
          \ 'Rv': 'VReplace',
          \ 'c':  'Command',
          \ 'cv': 'Vim Ex',
          \ 'ce': 'Ex',
          \ 'r':  'Prompt',
          \ 'rm': 'More',
          \ 'r?': 'Confirm',
          \ '!':  'Shell',
          \ 't':  'Terminal' }

    function! ST_line_num()
      let curline=line('.')
      let curcol=len(curline)
      let allcol=len(line('$'))
      if allcol<=3
        let allcol=3
      endif
      let cols=allcol-curcol
      let padding=repeat(' ', cols+1)
      let linenum=padding.curline
      return linenum
    endfunction

    function! ST_filetype()
      if &filetype != ''
        return tolower(&filetype)
      else
        return ''
    endfunction

    function! ST_filetype_with_symbol()
      let ft=ST_filetype()
      if len(ft) !=# 0
        return '  :: '.ft
      endif
      return ''
    endfunction

    function! ST_mode()
      return tolower(g:modes[mode()])
    endfunction

    function! ST_filepath()
      let filepath=expand('%:p')
      if len(filepath) !=# 0
        return filepath
      endif
      return ''
    endfunction

    function! ST_filepath_with_symbol()
      let fp=ST_filepath()
      if len(fp) !=# 0
        return '  » '.fp
      endif
      return ''
    endfunction

    function! ST_modified()
      if &mod ==# 1
        return '  [modified] '
      endif
      return ''
    endfunction

    set statusline=%{ST_line_num()}\%{ST_filepath_with_symbol()}\%{ST_modified()}%=%{ST_mode()}\%{ST_filetype_with_symbol()}

  " }}}

  " Per language settings {{{2

    augroup LanguageSpecific
      autocmd!
      autocmd filetype vim setlocal foldmethod=marker foldlevel=0
      autocmd filetype zsh setlocal foldmethod=marker foldlevel=0
      autocmd filetype php setlocal shiftwidth=4 tabstop=4 softtabstop=4 foldmethod=syntax
      autocmd filetype ruby setlocal foldmethod=syntax
      autocmd filetype make setlocal noexpandtab tabstop=4 softtabstop=4
      autocmd filetype python setlocal nosmartindent tabstop=4 softtabstop=4 shiftwidth=4
      autocmd filetype javascript,javascript.jsx setlocal foldmethod=syntax
    augroup end

  " }}}

" }}}

" Editing {{{

  " Use spaces instead of tabs and auto indent {{{2

    set backspace=2
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set shiftround
    set expandtab
    set smarttab
    set autoindent
    set smartindent
    " set cinoptions=>4,l1,p0,)50,*50,t0

  " }}}


  " Completion {{{2

    set wildmenu
    " set wildmode=list:longest
    set wildmode=longest,list,full
    set wildignore=
      \*.png,
      \*.jpg,
      \*.gif,
      \*.gem,
      \*.swp,
      \*.zip,
      \*.gz,
      \*/.DS_Store/*,
      \*/tmp/*,
      \*/node_modules/*,
      \*/bower_components/*,
      \*/vendor/*,
      \*/.gem/*,
      \*/.git/*,
      \*/.hg/*,
      \*/.svn/*
    set wildignorecase

  " }}}

  " Search {{{2

    set ignorecase
    set smartcase
    set infercase
    set incsearch
    set hlsearch

  " }}}

  " Split and join {{{2

    set nojoinspaces
    set splitbelow
    set splitright

  " }}}

  " Timeout {{{2

    set timeout
    set timeoutlen=5000
    set ttimeout
    set ttimeoutlen=0
    set ttyfast

  " }}}

  " Completion {{{2

    set omnifunc=syntaxcomplete#Complete
    set completefunc=syntaxcomplete#Complete
    " set completeopt=longest,menu,menuone,noinsert,noselect
    set completeopt=menu,menuone,noinsert,noselect
    " set complete=.,w,b,u,t,i
    set complete-=i

  " }}}

  " Folding {{{2

    set foldenable
    " set foldmethod=indent
    set foldmethod=manual
    set foldlevel=1000

  " }}}

  " Focus on the line from last open {{{2

    augroup FocusLastLine
      autocmd!
      autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"" | endif
    augroup end

  " }}}

  " Disable automatic comment insertion {{{2

    augroup DisableAutoComment
      autocmd!
      autocmd filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    augroup end

  " }}}

" }}}

" Note {{{

" ** Default vim key binding for autocomplete
" <c-x><c-f> for path completion
" <c-x><c-k> for dictionary conpletion
" <c-x><c-l> for whole line completion
" <c-x><c-o> for omnifunc completion
" <c-x><c-u> for completefunc completion
" <c-x><c-]> for tag conpletion
" <c-x><c-n> for keyword in current file
" <c-x><c-v> for vim command line
" <c-n> for completion for next match keyword
" <c-p> for completion for previous match keyword
" <c-n> for next option
" <c-p> for previous option

" }}}
