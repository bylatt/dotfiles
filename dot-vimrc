" vim: set sw=2 ts=2 sts=0 et fdm=marker :nospell:

" Initial {{{

set nocompatible

" }}}

" Plugins {{{

if !filereadable(expand($HOME.'/.vim/autoload/plug.vim'))
  silent !curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin($HOME.'/.vim/plug')
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'terryma/vim-expand-region'
  Plug 'pangloss/vim-javascript'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'jparise/vim-graphql'
  Plug 'sgur/vim-editorconfig'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'lifepillar/vim-gruvbox8'
  Plug 'vim-test/vim-test'
  Plug 'srstevenson/vim-picker'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

filetype plugin indent on

" }}}

" Mappings {{{

" Prefer spaces for leader
let mapleader = "\<space>"

  " Modes {{{2

    nnoremap j gj
    nnoremap k gk
    nnoremap ; :
    nnoremap <cr> :nohlsearch<cr>

    vmap <  <gv
    vmap > >gv

  " }}}

  " Navigation {{{2

    nnoremap <c-j> <c-w>j
    nnoremap <c-k> <c-w>k
    nnoremap <c-h> <c-w>h
    nnoremap <c-l> <c-w>l

  " }}}

  " QuickRun {{{2

    augroup QuickRun
      autocmd!
      autocmd filetype go nnoremap <buffer> <leader>m :!go run %<cr>
      autocmd filetype ruby nnoremap <buffer> <leader>m :!ruby %<cr>
      autocmd filetype python nnoremap <buffer> <leader>m :!python3 %<cr>
      autocmd filetype javascript nnoremap <buffer> <leader>m :!node %<cr>
      autocmd filetype typescript nnoremap <buffer> <leader>m :!ts-node %<cr>
    augroup end

  " }}}

  " Split {{{2

    nnoremap <leader>s :sp<cr>
    nnoremap <leader>v :vsp<cr>

  " }}}

" }}}

" PluginSettings {{{

  " Test {{{2

    noremap <silent><leader>a :TestNearest<cr>
    noremap <silent><leader>s :TestFile<cr>

  " }}}


  " Coc {{{2

    let g:coc_global_extensions=[
          \ 'coc-tsserver',
          \ 'coc-pyright',
          \ 'coc-rust-analyzer',
          \ 'coc-go',
          \ 'coc-json',
          \ 'coc-yaml',
          \ 'coc-css',
          \ 'coc-dictionary',
          \ 'coc-lists',
          \ 'coc-prettier',
          \ 'coc-jest',
          \ ]

    function! s:CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    inoremap <silent><expr> <tab>
          \ pumvisible() ? "\<c-n>" :
          \ <sid>CheckBackspace() ? "\<tab>" :
          \ coc#refresh()
    inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<c-h>"

    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " nnoremap <silent> <leader>p :CocList files<cr>
    " nnoremap <silent> <leader>o :CocList buffers<cr>

    function! s:CocOrganizeImport()
      if &ft =~ 'go\|rust\|python'
        :silent call CocAction('runCommand', 'editor.action.organizeImport')
      endif
    endfunction

    function! s:CocFormat()
      if &ft =~ 'javascript\|javascriptreact\|typescript\|typescriptreact\|html\|css\|markdown\|go\|rust\|python'
        :silent call CocAction('format')
      endif
    endfunction

    function! s:CocOnsave()
      call <sid>CocOrganizeImport()
      call <sid>CocFormat()
    endfunction

    autocmd BufWritePre * call <sid>CocOnsave()

  " }}}

  " Picker {{{2

    let g:picker_custom_find_executable='fd'
    let g:picker_custom_find_flags='-t f'
    let g:picker_selector_executable='sk'
    let g:picker_selector_flags=''
    nmap <leader>p <Plug>(PickerEdit)
    nmap <leader>o <Plug>(PickerBuffer)

  " }}}

" }}}

" Environment {{{

  set encoding=utf-8
  set fileencoding=utf-8
  set termencoding=utf-8
  set nobomb
  set shell=zsh

  " Backup and undos {{{2

    set noswapfile
    set writebackup
    set backupdir=$HOME/.vim/backup
    set undofile
    set undodir=$HOME/.vim/undo
    set undolevels=1000
    set undoreload=10000
    set directory=$HOME/.vim/tmp

  " }}}

  " Autoread and write files {{{2

    set autoread
    set autowrite
    set autowriteall

  " }}}

  set mouse=a

  " Use rg for grep {{{2

    set grepprg=rg\ -i\ --vimgrep
    set grepformat=%f:%l:%c:%m

  " }}}

  " Enable clipboard {{{2

    let g:clipboard={
          \ 'name': 'pbcopy',
          \ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
          \ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
          \ 'cache_enabled': 0 }
    set clipboard=unnamed

  " }}}

" }}}

" Appearance {{{

  " Color {{{2

    set t_Co=256
    syntax on
    set background=dark
    set guicursor=
    set termguicolors
    color gruvbox8

    highlight Normal guibg=none ctermbg=none
    highlight CursorLine term=none cterm=none
    highlight CursorLineNr term=none cterm=none ctermfg=8

  " }}}

  set linespace=0
  set shortmess=atToOIc
  set formatoptions-=cro
  set belloff+=ctrlg
  set viewoptions+=unix,slash
  set noshowmode
  set showcmd
  set cmdheight=1
  set showtabline=0
  set hidden
  set number
  set norelativenumber
  set noshowmatch
  set matchtime=0
  set nowrap
  set listchars=tab:\ \ ,eol:\ ,trail:•,nbsp:.
  set list
  set scrolloff=0
  set synmaxcol=1000
  set cursorline
  set nocursorcolumn
  set signcolumn=no

  " Nicer netrw {{{2

    let g:netrw_menu=0
    let g:netrw_banner=0
    let g:netrw_altv=1
    let g:netrw_bannoremaper=0
    let g:netrw_preview=1
    let g:netrw_winsize=25
    let g:netrw_liststyle=3
    let g:netrw_browse_split=0
    let g:netrw_list_hide=&wildignore

  " }}}

  " Nicer statusline {{{2

    set laststatus=2

    let g:modes={
          \ 'n':  'Normal',
          \ 'no': 'N·Operator Pending',
          \ 'v':  'Visual',
          \ 'V':  'V·Line',
          \ '': 'V·Block',
          \ 's':  'Select',
          \ 'S':  'S·Line',
          \ '^S': 'S·Block',
          \ 'i':  'Insert',
          \ 'R':  'Replace',
          \ 'Rv': 'VReplace',
          \ 'c':  'Command',
          \ 'cv': 'Vim Ex',
          \ 'ce': 'Ex',
          \ 'r':  'Prompt',
          \ 'rm': 'More',
          \ 'r?': 'Confirm',
          \ '!':  'Shell',
          \ 't':  'Terminal' }

    function! STLineNum()
      let curline=line('.')
      let curcol=len(curline)
      let allcol=len(line('$'))
      if allcol<=3
        let allcol=3
      endif
      let cols=allcol-curcol
      let padding=repeat(' ', cols+1)
      let linenum=padding.curline
      return linenum
    endfunction

    function! STFiletype()
      if &filetype != ''
        return tolower(&filetype)
      else
        return ''
    endfunction

    function! STFileTypeWithSymbol()
      let ft=STFiletype()
      if len(ft) !=# 0
        return '  :: '.ft
      endif
      return ''
    endfunction

    function! STMode()
      return tolower(g:modes[mode()])
    endfunction

    function! STFilepath()
      let filepath=expand('%:p')
      if len(filepath) !=# 0
        return filepath
      endif
      return ''
    endfunction

    function! STFilepathWithSymbol()
      let fp=STFilepath()
      if len(fp) !=# 0
        return '  » '.fp
      endif
      return ''
    endfunction

    function! STModified()
      if &mod ==# 1
        return '  [modified] '
      endif
      return ''
    endfunction

    set statusline=%{STLineNum()}\%{STFilepathWithSymbol()}\%{STModified()}%=%{STMode()}\%{STFileTypeWithSymbol()}

  " }}}

  " Per language settings {{{2

    augroup LanguageSpecific
      autocmd!
      autocmd filetype vim setlocal foldmethod=marker foldlevel=0
      autocmd filetype zsh setlocal foldmethod=marker foldlevel=0
      autocmd filetype php setlocal shiftwidth=4 tabstop=4 softtabstop=4 foldmethod=syntax
      autocmd filetype ruby setlocal foldmethod=syntax
      autocmd filetype make setlocal noexpandtab tabstop=4 softtabstop=4
      autocmd filetype python setlocal nosmartindent tabstop=4 softtabstop=4 shiftwidth=4
      autocmd filetype javascript,javascriptreact,typescript,typescriptreact setlocal foldmethod=syntax
    augroup end

  " }}}

" }}}

" Editing {{{

  " Use spaces instead of tabs and auto indent {{{2

    set backspace=2
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set shiftround
    set expandtab
    set smarttab
    set autoindent
    set smartindent

  " }}}


  " Completion {{{2

    set wildmenu
    " set wildmode=list:longest
    set wildmode=longest,list,full
    set wildignore=
      \*.png,
      \*.jpg,
      \*.gif,
      \*.gem,
      \*.swp,
      \*.zip,
      \*.gz,
      \*/.DS_Store/*,
      \*/tmp/*,
      \*/node_modules/*,
      \*/bower_components/*,
      \*/vendor/*,
      \*/.gem/*,
      \*/.git/*,
      \*/.hg/*,
      \*/.svn/*
    set wildignorecase

  " }}}

  " Search {{{2

    set ignorecase
    set smartcase
    set infercase
    set incsearch
    set hlsearch

  " }}}

  " Split and join {{{2

    set nojoinspaces
    set splitbelow
    set splitright

  " }}}

  " Timeout {{{2

    set timeout
    set timeoutlen=5000
    set ttimeout
    set ttimeoutlen=0
    set ttyfast

  " }}}

  " Completion {{{2

    set omnifunc=syntaxcomplete#Complete
    set completefunc=syntaxcomplete#Complete
    " set completeopt=longest,menu,menuone,noinsert,noselect
    set completeopt=menuone,noinsert,noselect
    " set complete=.,w,b,u,t,i
    set complete-=i

  " }}}

  " Folding {{{2

    set foldenable
    " set foldmethod=indent
    set foldmethod=manual
    set foldlevel=1000

  " }}}

  " Focus on the line from last open {{{2

    augroup FocusLastLine
      autocmd!
      autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"" | endif
    augroup end

  " }}}

  " Disable automatic comment insertion {{{2

    augroup DisableAutoComment
      autocmd!
      autocmd filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    augroup end

  " }}}

" }}}

" Note {{{

" ** Default vim key binding for autocomplete
" <c-x><c-f> for path completion
" <c-x><c-k> for dictionary conpletion
" <c-x><c-l> for whole line completion
" <c-x><c-o> for omnifunc completion
" <c-x><c-u> for completefunc completion
" <c-x><c-]> for tag conpletion
" <c-x><c-n> for keyword in current file
" <c-x><c-v> for vim command line
" <c-n> for completion for next match keyword
" <c-p> for completion for previous match keyword
" <c-n> for next option
" <c-p> for previous option

" }}}
